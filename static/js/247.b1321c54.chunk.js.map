{"version":3,"file":"static/js/247.b1321c54.chunk.js","mappings":"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","sources":["api/movieApi.js","components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["const API_KEY = \"8bbca68b0ae3741f3662f327be8188fc\";\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.log('Error fetching trending movies:', error);\n  }\n};\n\nexport const getByMovieId = async (movieId) => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n    );\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log('Error fetching movie details:', error);\n  }\n};\n\nexport const getMovieCast = async (movieId) => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log('Error fetching cast details:', error);\n  }\n};\n\nexport const getMovieReviews = async (movieId) => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log('Error fetching reviews:', error);\n  }\n};\n\nexport const getSearchMovies = async (movie) => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${movie}`\n    );\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log('Error fetching search movies:', error);\n  }\n};","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieCast } from \"../../api/movieApi\";\nimport Loader from \"components/Loader/Loader\";\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getMovieCast(movieId)\n      .then((data) => {\n        setCast(data.cast);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (!cast || cast.length === 0) {\n    return <div>This movie has no actors.</div>;\n  }\n\n  return (\n    <div>\n      {cast.map(({ id, name, character, profile_path }) => (\n        <div key={id}>\n          <img\n            src={\n              profile_path\n                ? `https://image.tmdb.org/t/p/w300${profile_path}`\n                : \"https://static.vecteezy.com/system/resources/previews/005/337/799/original/icon-image-not-found-free-vector.jpg\"\n            }\n            alt={name}\n            width=\"100\"\n          />\n          <p>{name}</p>\n          <p>\n            <b>Character:</b> {character}\n          </p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Cast;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["API_KEY","BASE_URL","fetchTrendingMovies","fetch","response","json","data","results","console","log","getByMovieId","movieId","getMovieCast","getMovieReviews","getSearchMovies","movie","useParams","useState","cast","setCast","isLoading","setIsLoading","useEffect","then","finally","length","map","id","name","character","profile_path","src","alt","width","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}